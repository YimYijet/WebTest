package main

import "fmt"

func main() {
	// 原码：最左边为符号位，剩余位表示数字
	// 若x为保存字节数，则表示数范围为 -2^(x-1) -- 2^(x-1)-1
	// 符号位为0表示正数，所以存在 +0，-0，约定：-0表示-2^(x-1)
	fmt.Printf("%b\n", -128)

	// 反码：正数反码就是其本身，负数原码除符号位不变，其余取反

	// 补码：反码 +1

	// >> 右移位运算符，右移符号位不变，符号位向右占位
	// 右移先取补码，再移位，再转换为原码
	fmt.Println(">>", 2>>1, -2>>1)

	// << 左移位运算符，低位用0补位，存在溢出
	// 左移先取补码，再移位，再转换为原码
	var l, lt int8 = 127, -63
	fmt.Println("<<", l<<1, lt<<1)

	// & 位与，同 1为 1，其余为 0
	// | 位或，同 0为 0，其余为 1
	// ^ 异或，相同为 0，相异为 1
	// 同取补码，与运算，再转换为原码
	fmt.Println("&, |, ^", -2&-3, -2|-3, -2^-3)

	// ^ 一元运算为 位非，等同于取反减一
	// 同取补码，与运算，再转换为原码
	fmt.Println("^", ^-2, ^2)

	//

}
